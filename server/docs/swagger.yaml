definitions:
  dbTable.Role:
    properties:
      createdAt:
        description: 创建时间
        type: string
      deletedAt:
        type: string
      roleId:
        type: integer
      roleName:
        type: string
      updatedAt:
        description: 更新时间
        type: string
    type: object
  dbTable.User:
    properties:
      active:
        description: UserRole  Role      `json:"role" gorm:"foreignKey:RoleId;references:RoleId;comment:user's
          role"`
        type: integer
      createdAt:
        type: string
      email:
        type: string
      id:
        type: integer
      password:
        type: string
      updatedAt:
        type: string
      userRoles:
        items:
          $ref: '#/definitions/dbTable.Role'
        type: array
      username:
        type: string
      uuid:
        type: string
    type: object
  request.ActiveUser:
    properties:
      code:
        type: string
    required:
    - code
    type: object
  request.DeleteUser:
    properties:
      uuid:
        description: uuid
        type: string
    required:
    - uuid
    type: object
  request.EditUser:
    properties:
      active:
        type: integer
      email:
        type: string
      role:
        type: integer
      username:
        type: string
      uuid:
        description: uuid
        type: string
    required:
    - uuid
    type: object
  request.RegisterUser:
    properties:
      active:
        type: integer
      email:
        description: HeaderImg    string `json:"headerImg" gorm:"default:'https://qmplusimg.henrongyi.top/gva_header.jpg'"`
        type: string
      password:
        type: string
      role:
        description: Captcha string `json:"captcha" binding:"required"`  // use email
          verification instead
        type: integer
      roles:
        items:
          type: integer
        type: array
      username:
        type: string
    required:
    - email
    - password
    - username
    type: object
  response.CaptchaResponse:
    properties:
      captcha:
        type: string
    type: object
  response.Paging:
    properties:
      list: {}
      page:
        type: integer
      pageSize:
        type: integer
      total:
        type: integer
    type: object
  response.Response:
    properties:
      code:
        type: integer
      data: {}
      msg:
        type: string
    type: object
host: localhost:3000
info:
  contact:
    name: Flynn Sun
  description: Gin swagger
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  title: Gin swagger
  version: "1.0"
paths:
  /api/v1/auth/captcha:
    post:
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        "200":
          description: return base64 captcha image
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                ' msg':
                  type: string
                data:
                  $ref: '#/definitions/response.CaptchaResponse'
              type: object
      security:
      - ApiKeyAuth: []
      summary: Generate captcha image
      tags:
      - Auth
  /api/v1/auth/sendEmailCode:
    post:
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        "200":
          description: return send email result
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                msg:
                  type: string
              type: object
      security:
      - ApiKeyAuth: []
      summary: Send verification code email
      tags:
      - Auth
  /api/v1/user/active:
    post:
      description: Active user with verification code from email
      parameters:
      - description: code
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/request.ActiveUser'
      produces:
      - application/json
      responses:
        "200":
          description: return activated user info
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  $ref: '#/definitions/dbTable.User'
                msg:
                  type: string
              type: object
      summary: Active user
      tags:
      - User
  /api/v1/user/delete:
    delete:
      consumes:
      - application/json
      parameters:
      - description: user uuid
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/request.DeleteUser'
      produces:
      - application/json
      responses:
        "200":
          description: user deleted
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                msg:
                  type: string
              type: object
      summary: delete user
      tags:
      - User
  /api/v1/user/edit:
    put:
      description: update user info
      parameters:
      - description: username, email, role ID,active, uuid
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/request.EditUser'
      produces:
      - application/json
      responses:
        "200":
          description: edit user, return updated user info
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  $ref: '#/definitions/dbTable.User'
                msg:
                  type: string
              type: object
      summary: Edit user info
      tags:
      - User
  /api/v1/user/register:
    post:
      description: register user
      parameters:
      - description: username, password, email,captcha, role ID
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/request.RegisterUser'
      produces:
      - application/json
      responses:
        "200":
          description: register user, return user info
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  $ref: '#/definitions/dbTable.User'
                msg:
                  type: string
              type: object
      summary: Register user
      tags:
      - User
  /api/v1/user/userList:
    get:
      consumes:
      - application/json
      description: get user list
      parameters:
      - in: query
        name: active
        type: integer
      - description: order by desc (by default)
        in: query
        name: desc
        type: boolean
      - in: query
        name: orderBy
        type: string
      - in: query
        name: pageNumber
        type: integer
      - in: query
        name: pageSize
        type: integer
      - in: query
        name: username
        type: string
      responses:
        "200":
          description: paged user list, includes page size, page number, total counts
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  allOf:
                  - $ref: '#/definitions/response.Paging'
                  - properties:
                      data:
                        items:
                          $ref: '#/definitions/dbTable.User'
                        type: array
                    type: object
                msg:
                  type: string
              type: object
      summary: get user list
      tags:
      - User
swagger: "2.0"
